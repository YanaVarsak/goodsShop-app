{"ast":null,"code":"var _jsxFileName = \"/Users/anavarsak/Desktop/ShopV2.0/src/index.tsx\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { App } from \"components\";\nimport { store } from \"store\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createServer, Model, belongsTo, Factory, Response } from \"miragejs\";\nimport faker from 'faker';\nimport * as yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst prodcutSchema = yup.object().shape({\n  categoryTypeId: yup.string().required(),\n  description: yup.string().required(),\n  id: yup.string().required(),\n  img: yup.string().required(),\n  label: yup.string().required(),\n  price: yup.string().required()\n});\n\nconst valdiateProduct = async prodcut => {\n  return prodcutSchema.validate(prodcut, {\n    abortEarly: false\n  }).then(() => []).catch(_ref => {\n    let {\n      inner\n    } = _ref;\n    return inner.map(e => {\n      var _e$message$split$, _e$message;\n\n      return (_e$message$split$ = (_e$message = e.message) === null || _e$message === void 0 ? void 0 : _e$message.split(' at createError')[0]) !== null && _e$message$split$ !== void 0 ? _e$message$split$ : e;\n    });\n  });\n};\n\ncreateServer({\n  models: {\n    category: Model,\n    good: Model.extend({\n      categoryType: belongsTo('category')\n    }),\n    cart: Model\n  },\n  factories: {\n    good: Factory.extend({\n      label: () => faker.commerce.productName(),\n      price: () => faker.commerce.price(1, 200),\n      description: () => faker.commerce.productDescription(),\n      img: 'https://source.unsplash.com/random'\n    })\n  },\n\n  seeds(server) {\n    const CATEGORIES = [{\n      type: 'house',\n      label: ' Дом, сад, зоотовары'\n    }, {\n      type: 'children',\n      label: 'Детям и мамам'\n    }, {\n      type: 'cosmetics',\n      label: 'Косметика, парфюмерия'\n    }, {\n      type: 'souvenirs',\n      label: 'Сувениры, галантерея'\n    }, {\n      type: 'books',\n      label: 'Книги'\n    }, {\n      type: 'products',\n      label: 'Продукты, деликатесы'\n    }, {\n      type: 'entertainment',\n      label: 'Развлечения, творчество'\n    }, {\n      type: 'electronics',\n      label: 'Техника, электроника'\n    }, {\n      type: 'studies',\n      label: 'Канцтовары, учёба'\n    }, {\n      type: 'sport',\n      label: 'Туризм, отдых, спорт'\n    }, {\n      type: 'health',\n      label: 'Здоровье, медтехника'\n    }];\n    CATEGORIES.forEach(category => {\n      const serverCategory = server.create(\"category\", category);\n      server.createList(\"good\", 20, {\n        categoryTypeId: serverCategory.id\n      });\n    });\n  },\n\n  routes() {\n    this.namespace = \"api\";\n    this.get(\"/categories\", (schema, request) => {\n      const {\n        ids\n      } = request.queryParams;\n      const idsArray = ids === null || ids === void 0 ? void 0 : ids.split(',');\n      return schema.categories.where(category => {\n        var _idsArray$includes;\n\n        return (_idsArray$includes = idsArray === null || idsArray === void 0 ? void 0 : idsArray.includes(category.id)) !== null && _idsArray$includes !== void 0 ? _idsArray$includes : true;\n      });\n    });\n    this.get('/popular_categories', schema => {\n      const categories = schema.categories.all().models;\n      return categories.slice(0, 5).map(category => {\n        const items = schema.goods.where({\n          categoryTypeId: category.id\n        }).models;\n        return {\n          category,\n          items\n        };\n      });\n    });\n    this.get(\"/goods\", (schema, request) => {\n      const {\n        ids,\n        categoryTypeIds\n      } = request.queryParams;\n      const idsArray = ids === null || ids === void 0 ? void 0 : ids.split(',');\n      const categoryTypeIdsArray = categoryTypeIds === null || categoryTypeIds === void 0 ? void 0 : categoryTypeIds.split(',');\n      const items = schema.goods.where(good => {\n        var _idsArray$includes2, _categoryTypeIdsArray;\n\n        const isIdMatch = (_idsArray$includes2 = idsArray === null || idsArray === void 0 ? void 0 : idsArray.includes(good.id)) !== null && _idsArray$includes2 !== void 0 ? _idsArray$includes2 : true;\n        const isTypeIdMatch = (_categoryTypeIdsArray = categoryTypeIdsArray === null || categoryTypeIdsArray === void 0 ? void 0 : categoryTypeIdsArray.includes(good.categoryTypeId)) !== null && _categoryTypeIdsArray !== void 0 ? _categoryTypeIdsArray : true;\n        return isIdMatch && isTypeIdMatch;\n      });\n      return {\n        items: items.models,\n        total: items.models.length\n      };\n    });\n    this.get('/cart', schema => {\n      return schema.carts.all();\n    });\n    this.put('/cart', async (schema, request) => {\n      try {\n        var _JSON$parse;\n\n        const prodcut = (_JSON$parse = JSON.parse(request.requestBody)) !== null && _JSON$parse !== void 0 ? _JSON$parse : {};\n        const errors = await valdiateProduct(prodcut);\n\n        if (errors.length) {\n          return new Response(400, {}, errors);\n        }\n\n        ;\n        return schema.carts.findOrCreateBy(prodcut);\n      } catch {\n        return new Response(500);\n      }\n    }, {\n      timing: 2000\n    });\n    this.delete('/cart', async (schema, request) => {\n      try {\n        var _JSON$parse2;\n\n        const prodcut = (_JSON$parse2 = JSON.parse(request.requestBody)) !== null && _JSON$parse2 !== void 0 ? _JSON$parse2 : {};\n        const errors = await valdiateProduct(prodcut);\n\n        if (errors.length) {\n          return new Response(400, {}, errors);\n        }\n\n        ;\n        const prodcutDb = schema.carts.findBy(prodcut);\n\n        if (!prodcutDb) {\n          return new Response(400, {}, 'Продукт не в корзине');\n        }\n\n        prodcutDb.destroy();\n        return new Response(200);\n      } catch {\n        return new Response(500);\n      }\n    }, {\n      timing: 2000\n    });\n  }\n\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 160,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/anavarsak/Desktop/ShopV2.0/src/index.tsx"],"names":["ReactDOM","App","store","Provider","BrowserRouter","Router","createServer","Model","belongsTo","Factory","Response","faker","yup","prodcutSchema","object","shape","categoryTypeId","string","required","description","id","img","label","price","valdiateProduct","prodcut","validate","abortEarly","then","catch","inner","map","e","message","split","models","category","good","extend","categoryType","cart","factories","commerce","productName","productDescription","seeds","server","CATEGORIES","type","forEach","serverCategory","create","createList","routes","namespace","get","schema","request","ids","queryParams","idsArray","categories","where","includes","all","slice","items","goods","categoryTypeIds","categoryTypeIdsArray","isIdMatch","isTypeIdMatch","total","length","carts","put","JSON","parse","requestBody","errors","findOrCreateBy","timing","delete","prodcutDb","findBy","destroy","render","document","getElementById"],"mappings":"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","sourcesContent":["import ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { App } from \"components\";\nimport { store } from \"store\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createServer, Model, belongsTo, Factory, Response } from \"miragejs\"\nimport faker from 'faker';\nimport * as yup from 'yup';\n\nconst prodcutSchema = yup.object().shape({\n  categoryTypeId: yup.string().required(),\n  description: yup.string().required(),\n  id: yup.string().required(),\n  img: yup.string().required(),\n  label: yup.string().required(),\n  price: yup.string().required(),\n});\n\nconst valdiateProduct = async (prodcut) => {\n  return prodcutSchema\n    .validate(prodcut, { abortEarly: false })\n    .then(() => [])\n    .catch(({ inner }) => inner.map((e) => e.message?.split(' at createError')[0] ?? e))\n}\n\ncreateServer({\n  models: {\n    category: Model,\n\n    good: Model.extend({\n      categoryType: belongsTo('category'),\n    }),\n\n    cart: Model,\n  },\n\n  factories: {\n    good: Factory.extend({\n      label: () => faker.commerce.productName(),\n      price:  () => faker.commerce.price(1, 200),\n      description:  () => faker.commerce.productDescription(),\n      img: 'https://source.unsplash.com/random',\n    }),\n  },\n\n  seeds(server) {\n    const CATEGORIES = [\n      { type: 'house', label: ' Дом, сад, зоотовары' },\n      { type: 'children', label: 'Детям и мамам' },\n      { type: 'cosmetics', label: 'Косметика, парфюмерия' },\n      { type: 'souvenirs', label: 'Сувениры, галантерея' },\n      { type: 'books', label: 'Книги' },\n      { type: 'products', label: 'Продукты, деликатесы' },\n      { type: 'entertainment', label: 'Развлечения, творчество' },\n      { type: 'electronics', label: 'Техника, электроника' },\n      { type: 'studies', label: 'Канцтовары, учёба' },\n      { type: 'sport', label: 'Туризм, отдых, спорт' },\n      { type: 'health', label: 'Здоровье, медтехника' },\n    ];\n\n    CATEGORIES.forEach((category) => {\n      const serverCategory = server.create(\"category\", category);\n\n      server.createList(\"good\", 20, { categoryTypeId: serverCategory.id });\n    });\n  },\n\n\n  routes() {\n    this.namespace = \"api\"\n\n    this.get(\"/categories\", (schema, request) => {\n      const { ids } = request.queryParams;\n\n      const idsArray = ids?.split(',');\n\n      return schema.categories.where((category) => {\n        return idsArray?.includes(category.id) ?? true\n      });\n    });\n\n    this.get('/popular_categories', (schema) => {\n      const categories = schema.categories.all().models;\n\n      return categories.slice(0, 5).map((category) => {\n        const items = schema.goods.where({ categoryTypeId: category.id }).models;\n\n        return { category, items };\n      });\n    });\n\n    this.get(\"/goods\", (schema, request) => {\n      const { ids, categoryTypeIds } = request.queryParams;\n\n      const idsArray = ids?.split(',');\n      const categoryTypeIdsArray = categoryTypeIds?.split(',');\n\n      const items = schema.goods.where((good) => {\n        const isIdMatch =  idsArray?.includes(good.id) ?? true\n        const isTypeIdMatch =  categoryTypeIdsArray?.includes(good.categoryTypeId) ?? true\n\n        return isIdMatch && isTypeIdMatch;\n      });\n\n      return {\n        items: items.models,\n        total: items.models.length,\n      };\n    });\n\n    this.get('/cart', (schema) => {\n      return schema.carts.all();\n    });\n\n    this.put('/cart', async (schema, request) => {\n      try {\n        const prodcut = JSON.parse(request.requestBody) ?? {};\n\n        const errors = await valdiateProduct(prodcut);\n\n        if (errors.length) {\n          return new Response(400, {}, errors)\n        };\n\n        return schema.carts.findOrCreateBy(prodcut);\n      } catch {\n        return new Response(500)\n      }\n    }, { timing: 2000 });\n\n    this.delete('/cart', async (schema, request) => {\n      try {\n        const prodcut = JSON.parse(request.requestBody) ?? {};\n\n        const errors = await valdiateProduct(prodcut);\n\n        if (errors.length) {\n          return new Response(400, {}, errors)\n        };\n\n        const prodcutDb = schema.carts.findBy(prodcut);\n\n        if (!prodcutDb) {\n          return new Response(400, {}, 'Продукт не в корзине')\n        }\n\n        prodcutDb.destroy();\n\n        return new Response(200);\n      } catch {\n        return new Response(500);\n      }\n    }, { timing: 2000 });\n  },\n})\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}